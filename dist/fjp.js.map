{"version":3,"file":"fjp.js","sources":["../source/util/clone/index.js","../source/util/isArray/index.js","../source/util/isFunction/index.js","../source/util/isObject/index.js","../source/util/isString/index.js","../source/util/isNumber/index.js","../source/util/not/index.js","../source/curry/index.js","../source/util/tap/index.js","../source/combinators/A/index.js","../source/combinators/I/index.js","../source/combinators/K/index.js","../source/combinators/OR/index.js","../source/combinators/Fork/index.js","../source/combinators/T/index.js","../source/monads/Maybe/index.js","../source/monads/Either/index.js","../source/monads/IO/index.js","../source/every/index.js","../source/associate/index.js","../source/altAssociate/index.js","../source/reduce/index.js","../source/sum/index.js","../source/average/index.js","../source/both/index.js","../source/compact/index.js","../source/compose/index.js","../source/concat/index.js","../source/concatN/index.js","../source/deviation/index.js","../source/difference/index.js","../source/distinct/index.js","../source/distinctN/index.js","../source/distinctFn/index.js","../source/each/index.js","../source/filter/index.js","../source/find/index.js","../source/findIndex/index.js","../source/flatten/index.js","../source/groupBy/index.js","../source/intersection/index.js","../source/join/index.js","../source/map/index.js","../source/merge/index.js","../source/occurrence/index.js","../source/partial/index.js","../source/pipe/index.js","../source/pop/index.js","../source/promisify/index.js","../source/property/index.js","../source/push/index.js","../source/reduceRight/index.js","../source/reverse/index.js","../source/select/index.js","../source/shift/index.js","../source/shuffle/index.js","../source/slice/index.js","../source/some/index.js","../source/sort/index.js","../source/sumN/index.js","../source/symmetricDifference/index.js","../source/union/index.js","../source/unshift/index.js"],"sourcesContent":["/* eslint-disable fp-jxl/no-let, fp-jxl/no-loops, fp-jxl/no-mutation */\n\nfunction clone(x) {\n  // eslint-disable-next-line fp-jxl/no-nil\n  let i;\n\n  if(!x || typeof x !== 'object') {\n    return x;\n  }\n\n  if(x instanceof Date) {\n    return new Date(x);\n  }\n\n  if(Array.isArray(x)) {\n    const arr = [];\n\n    for(i = 0; i < x.length; i += 1) {\n      arr[i] = clone(x[i]);\n    }\n\n    return arr;\n  }\n\n  if(x instanceof Object && x.constructor === Object) {\n    const obj = {};\n\n    for(i in x) {\n      if(x.hasOwnProperty(i)) {\n        obj[i] = clone(x[i]);\n      }\n    }\n\n    return obj;\n  }\n\n  return x;\n}\n\nexport default clone;\n","/**\n * Determines if the given value is an array.\n * @signature isArray :: a -> Boolean\n * @func\n * @example\n * isArray([1, 2, 3])  // true\n * isArray({ a: 'b' })  // false\n */\nconst isArray = value => Array.isArray(value);\n\nexport default isArray;\n","/**\n * Determines if the given value is a function.\n * @signature isFunction :: a -> Boolean\n * @func\n * @example\n * isFunction(() => {})  // true\n * isFunction([1, 2, 3])  // false\n */\nconst isFunction = value => typeof value === 'function';\n\nexport default isFunction;\n","/**\n * Determines if the given value is an object.\n * @signature isObject :: a -> Boolean\n * @func\n * @example\n * isObject({ a: 'b' })  // true\n * isObject([1, 2, 3])  // false\n */\nconst isObject = value => value != null && !Array.isArray(value) && typeof value === 'object';\n\nexport default isObject;\n","/**\n * Determines if the given value is a string.\n * @signature isString :: a -> Boolean\n * @func\n * @example\n * isString('foo bar')  // true\n * isString({ a: 'b' })  // false\n */\nconst isString = value => value != null && value.constructor === String;\n\nexport default isString;\n","/**\n * Determines if the given value is a number.\n * @signature isNumber :: a -> Boolean\n * @func\n * @example\n * isNumber(42)  // true\n * isNumber(8e5)  // true\n * isNumber(0x2F)  // true\n * isNumber('foo bar')  // false\n */\nconst isNumber = n => !isNaN(parseFloat(n)) && isFinite(n);\n\nexport default isNumber;\n","/**\n * Negates the given boolean-like value.\n * @signature not :: Boolean -> Boolean\n * @func\n * @example\n * not(true); // false\n * not(false); // true\n * not(2); // false\n */\nconst not = x => !x;\n\nexport default not;\n","/* eslint-disable fp-jxl/no-nil */\n/**\n * Wraps the given function, if the number of provided args is sufficient, call the passed function fn.\n * Otherwise, return a wrapped function fn that expects the rest of the arguments.\n * If you want to curry a function that accepts a variable number of arguments (a variadic function),\n * you can optionally pass the number of arguments to the second parameter arity.\n * @signature curry :: ((a, b, ..., n) -> m) -> a -> b -> ...n -> m\n * @func\n * @example\n * const add = curry((x, y) => x + y);\n * const addFiveTo = add(5);\n * addFiveTo(10); // 15\n */\nfunction curry(fn, arity = fn.length, ...args) {\n  return arity <= args.length ? fn(...args) : curry.bind(null, fn, arity, ...args);\n}\n\nexport default curry;\n","/* eslint-disable fp-jxl/no-unused-expression */\nimport curry from '../../curry';\n\n/**\n * Calls the given function with the given value and returns the value.\n * @signature tap :: (a -> b) -> a -> a\n * @func\n * @example\n * tap(console.log, 'foobar') // foobar\n */\nconst tap = curry((x, y) => {\n  x(y);\n  return y;\n});\n\nexport default tap;\n","import curry from '../../curry';\n\n/**\n * Calls the given function with the given value.\n * @signature A :: (a -> b) -> a -> b\n * @func\n * @aka apply\n */\nconst A = curry((f, x) => f(x));\n\nexport default A;\n","/**\n * Returns the given value.\n * @signature I :: a -> a\n * @func\n * @aka identity\n */\nconst I = x => x;\n\nexport default I;\n","/* eslint-disable no-unused-vars */\nimport curry from '../../curry';\n\n/**\n * Takes two values and returns the given first.\n * @signature K :: a -> b -> a\n * @func\n * @aka constant\n */\nconst K = curry((x, y) => x);\n\nexport default K;\n","import curry from '../../curry';\n\n/**\n * Given two functions that take the same value, returns the first if the result is truthy, otherwise, the second.\n * @signature OR :: (a -> b) -> (a -> b) -> b\n * @func\n * @aka alternation\n */\nconst OR = curry((f, g) => x => f(x) || g(x));\n\nexport default OR;\n","import curry from '../../curry';\n\n/**\n * Takes a joiner func, and two other funcs and a value. The value is given to both funcs and the\n * results of each of these is given to the joiner func.\n * @signature Fork :: (b -> c -> d) -> (a -> b) -> (a -> c) -> a -> d\n * @func\n * @aka join\n */\nconst Fork = curry((joiner, fnA, fnB, x) => joiner(fnA(x), fnB(x)));\n\nexport default Fork;\n","import curry from '../../curry';\n\n/**\n * Calls the given function with the given value. (Reverse order of apply)\n * @signature T :: a -> (a -> b) -> b\n * @func\n * @aka thrush, applyTo\n */\nconst T = curry((x, f) => f(x));\n\nexport default T;\n","/* eslint-disable fp-jxl/no-this, fp-jxl/no-class, fp-jxl/no-mutation */\n\nclass Maybe {\n  static of(x) {\n    // eslint-disable-next-line no-use-before-define\n    return x !== undefined && x !== null ? new Just(x) : new Nothing();\n  }\n\n  static Just(x) {\n    // eslint-disable-next-line no-use-before-define\n    return new Just(x);\n  }\n\n  static None() {\n    // eslint-disable-next-line no-use-before-define\n    return new Nothing();\n  }\n\n  static fromNullable(x) {\n    return Maybe.of(x);\n  }\n\n  static lift(fn, x) {\n    return Maybe.of(x).map(fn);\n  }\n\n  get isNothing() {\n    return false;\n  }\n\n  get isJust() {\n    return false;\n  }\n\n  flatten() {\n    return this;\n  }\n\n  join() {\n    return this;\n  }\n\n  filter() {\n    return this;\n  }\n\n  map() {\n    return this;\n  }\n\n  chain(fn) {\n    return this.map(fn).flatten();\n  }\n}\n\nclass Just extends Maybe {\n  // eslint-disable-next-line fp-jxl/no-nil\n  constructor(val) {\n    super();\n    this._val = val;\n  }\n\n  get value() {\n    return this._val;\n  }\n\n  get isJust() {\n    return true;\n  }\n\n  map(fn) {\n    return Maybe.of(fn(this._val));\n  }\n\n  flatten() {\n    if(!(this._val instanceof Just)) {\n      return this;\n    }\n\n    return this._val.flatten();\n  }\n\n  join() {\n    return this.flatten();\n  }\n\n  orElse() {\n    return this._val;\n  }\n\n  filter(fn) {\n    // eslint-disable-next-line fp-jxl/no-nil\n    return Maybe.of(fn(this._val) ? this._val : null);\n  }\n\n  toString() {\n    return `Maybe.Just(${ this._val })`;\n  }\n}\n\nclass Nothing extends Maybe {\n  // eslint-disable-next-line fp-jxl/no-nil\n  constructor() {\n    super();\n  }\n\n  // eslint-disable-next-line fp-jxl/no-nil\n  get value() {\n    // eslint-disable-next-line fp-jxl/no-throw\n    throw new TypeError(\"Can't extract the value of a Nothing\");\n  }\n\n  get isNothing() {\n    return true;\n  }\n\n  orElse(other) {\n    return other;\n  }\n\n  toString() {\n    return 'Maybe.Nothing';\n  }\n}\n\nexport default Maybe;\n","/* eslint-disable fp-jxl/no-this, fp-jxl/no-class, fp-jxl/no-mutation */\nimport Maybe from '../Maybe';\n\nclass Either {\n  static of(x) {\n    // eslint-disable-next-line no-use-before-define\n    return x !== undefined && x !== null && !(x instanceof Error) ?\n      new Right(x) : // eslint-disable-line no-use-before-define\n      new Left(x); // eslint-disable-line no-use-before-define\n  }\n\n  static fromNullable(x) {\n    return Either.of(x);\n  }\n\n  static Right(x) {\n    // eslint-disable-next-line no-use-before-define\n    return new Right(x);\n  }\n\n  static Left(x) {\n    // eslint-disable-next-line no-use-before-define\n    return new Left(x);\n  }\n\n  // eslint-disable-next-line fp-jxl/no-nil\n  static try(fn) {\n    try {\n      // eslint-disable-next-line callback-return\n      const result = fn();\n\n      return Either.of(result);\n    }\n    catch(e) {\n      // eslint-disable-next-line new-cap\n      return Either.Left(e);\n    }\n  }\n\n  get isRight() {\n    return false;\n  }\n\n  get isLeft() {\n    return false;\n  }\n\n  get value() {\n    return this._val;\n  }\n\n  join() {\n    if(this.value instanceof Either) {\n      return this.value.join();\n    }\n\n    return this;\n  }\n\n  map(fn) {\n    return Either.of(fn(this._val));\n  }\n\n  flatMap(fn) {\n    return this.map(fn).join();\n  }\n\n  filter() {\n    return this;\n  }\n\n  chain(fn) {\n    return this.isRight ? fn(this._val) : this;\n  }\n\n  cata(leftFn, rightFn) {\n    return this.isRight ? rightFn(this._val) : leftFn(this._val);\n  }\n\n  orElseFn() {\n    return this;\n  }\n\n  toMaybe() {\n    return this.cata(Maybe.None, Maybe.Just);\n  }\n}\n\nclass Right extends Either {\n  // eslint-disable-next-line fp-jxl/no-nil\n  constructor(val) {\n    super();\n    this._val = val;\n  }\n\n  get isRight() {\n    return true;\n  }\n\n  filter(fn) {\n    // eslint-disable-next-line fp-jxl/no-nil\n    return Either.of(fn(this._val) ? this._val : null);\n  }\n\n  orElse() {\n    return this._val;\n  }\n\n  async asyncChain(fn) {\n    return await fn(this._val);\n  }\n\n  toString() {\n    return `Either.Right(${ this.value })`;\n  }\n}\n\nclass Left extends Either {\n  // eslint-disable-next-line fp-jxl/no-nil\n  constructor(val) {\n    super();\n    this._val = val;\n  }\n\n  get isLeft() {\n    return true;\n  }\n\n  orElse(other) {\n    return other;\n  }\n\n  orElseFn(fn) {\n    return fn(this._val);\n  }\n\n  toString() {\n    return `Either.Left(${ this._val })`;\n  }\n}\n\nexport default Either;\n","/* eslint-disable fp-jxl/no-this, fp-jxl/no-class, fp-jxl/no-mutation */\nimport isFunction from '../../util/isFunction';\n\nclass IO {\n  // eslint-disable-next-line fp-jxl/no-nil\n  constructor(effect) {\n    if(!isFunction(effect)) {\n      // eslint-disable-next-line fp-jxl/no-throw\n      throw new Error('effect needs to be a function');\n    }\n\n    this._effect = effect;\n  }\n\n  static of(val) {\n    return new IO(() => val);\n  }\n\n  static from(fn) {\n    return new IO(fn);\n  }\n\n  map(fn) {\n    return new IO(() => fn(this._effect()));\n  }\n\n  chain(fn) {\n    return fn(this._effect());\n  }\n\n  run() {\n    return this._effect();\n  }\n}\n\nexport default IO;\n","import curry from '../curry';\nimport isFunction from '../util/isFunction';\nimport isArray from '../util/isArray';\n\n/**\n * Determines if all element in an array satisfy the given test function\n * @signature every :: (a -> Bool) -> [a] -> Bool\n * @func\n * @aka all\n * @example\n * every(Boolean, [1, 2, 3, 4]) // true\n * every(Boolean, [1, 2, null, 4]) // false\n */\nconst every = curry((fn, arr) => isArray(arr) && isFunction(fn) ? arr.every(fn) : false);\n\nexport default every;\n","/* eslint-disable fp-jxl/no-mutation */\nimport curry from '../curry';\nimport clone from '../util/clone';\n\n/**\n * Sets the given property and value on the object. Returning a new object.\n * @signature associate :: String k -> {} -> v -> {k: v}\n * @func\n * @example\n * const obj = associate('c', { a: b }, d)  // { a: b, c: d }\n */\nconst associate = curry((prop, obj, val) => {\n  const c = clone(obj);\n\n  c[prop] = val;\n  return c;\n});\n\nexport default associate;\n","import curry from '../curry';\nimport assoc from '../associate';\n\nconst altAssoc = curry((prop, val, obj) => assoc(prop, obj, val));\n\nexport default altAssoc;\n","import curry from '../curry';\nimport isFunction from '../util/isFunction';\nimport isArray from '../util/isArray';\nimport clone from '../util/clone';\n\nexport default curry((init, fn, arr) =>\n  !isFunction(fn) ?\n    isArray(arr) ?\n      clone(arr) :\n      [] :\n    isArray(arr) ?\n      clone(arr.reduce(fn, init)) :\n      []);\n","import isArray from '../util/isArray';\nimport curry from '../curry';\nimport reduce from '../reduce';\n\nexport default curry(arr => isArray(arr) ? reduce(0, (acc, val) => acc + Number(val), arr) : 0);\n","import isArray from '../util/isArray';\nimport sum from '../sum';\n\n/**\n * Averages the given array values\n * @signature average :: [Number] -> Number\n * @func\n * @example\n * average([ 1, 2, 3 ]); // 2\n * average(1, 2, 3); // 2\n * average(); // 0\n */\nconst average = (...nums) => isArray(nums) && nums.length ? sum([...nums]) / [...nums].length : 0;\n\nexport default average;\n","const both = (f, g) => x => f(x) && g(x);\n\nexport default both;\n","import isArray from '../util/isArray';\n\n/**\n * Removes falsey values from an array.\n * @signature compact :: [a] -> [a]\n * @func\n * @example\n * compact([ 0, 1, false, 2, '', 3, 'a', 'e' * 23, NaN, 's', 34 ]); // [ 1, 2, 3, 'a', 's', 34 ]\n * compact(null) // []\n */\nconst compact = arr => isArray(arr) ? arr.filter(Boolean) : [];\n\nexport default compact;\n","/**\n * Performs right-to-left function composition.\n * @signature compose :: [(m -> n), ..., (b -> c), (a -> b)] -> a -> n\n * @func\n * @example\n * const addOne = x => x + 1;\n * const timeTen = x => x * 10;\n * const addOneTimeTen = compose(timeTen, addOne);\n * const result = addOneTimeTen(9); // 100\n */\nconst compose = (...fns) =>\n  fns.reduce((f, g) =>\n    (...args) =>\n      f(g(...args)));\n\nexport default compose;\n","import isArray from '../util/isArray';\nimport isString from '../util/isString';\nimport curry from '../curry';\n\n/**\n * Concatenates two String|Arrays together.\n * Returns empty array if value arent of the same type or not String|Array.\n * @signature concat :: a -> b -> c\n * @func\n * @example\n * concat('foo', 'bar') // foobar\n * concat([1, 2], [3, 4]) // [1, 2, 3, 4]\n */\nconst concat = curry((a, b) =>\n  isArray(a) && isArray(b) ? [ ...a, ...b ] : isString(a) && isString(b) ? `${ a }${ b }` : []);\n\nexport default concat;\n","import reduce from '../reduce';\n\n/**\n * Concatenates N Arrays together.\n * @signature concat :: [a] -> [b] -> ...[n] -> [m]\n * @func\n * @example\n * concatN([1, 2], [3, 4], [5, 6]) // [1, 2, 3, 4, 5, 6]\n */\nconst concatN = (...args) => reduce([], (acc, val) => [ ...acc, ...val ], args);\n\nexport default concatN;\n","import curry from '../curry';\n\n// Returns the standard deviation of an array of numbers.\n//\n// deviation([ 10, 2, 38, 23, 38, 23, 21 ]);\n// >> 13.284434142114991 (sample)\n//\n// deviation([ 10, 2, 38, 23, 38, 23, 21 ], true);\n// >> 12.29899614287479 (population)\n//\nconst deviation = curry((usePopulation, arr) => {\n  const mean = arr.reduce((acc, val) => acc + val, 0) / arr.length;\n\n  return Math.sqrt(arr\n    .reduce((acc, val) => acc.concat(Math.pow(val - mean, 2)), [])\n    .reduce((acc, val) => acc + val, 0) /\n      (arr.length - (usePopulation ? 0 : 1)));\n});\n\nexport default deviation;\n","import curry from '../curry';\nimport isArray from '../util/isArray';\n\n/**\n * Returns the difference between two arrays.\n * @signature difference :: [a] -> [b] -> [c]\n * @func\n * @example\n * difference([ 1, 2, 3 ], [ 1, 2, 4 ]) // [3]\n * difference([], [ 1, 2, 4 ]) // [ 1, 2, 4 ]\n * difference([ 1, 2, 3 ], []) // [ 1, 2, 3 ]\n * difference([ 1, 2, 3 ], null) // [ 1, 2, 3 ]\n */\nconst difference = curry((a, b) => {\n  const s = isArray(b) && b.length ? new Set(b) : new Set();\n\n  return isArray(a) && a.length ? a.filter(x => !s.has(x)) : [...s];\n});\n\nexport default difference;\n","import isArray from '../util/isArray';\n\n/**\n * Returns all of the distinct values of an array.\n * @signature distinct :: [a] -> [b]\n * @func\n * @example\n * distinct([ 1, 2, 2, 3, 4, 4, 5 ]) // [ 1, 2, 3, 4, 5 ]\n */\nconst distinct = arr => isArray(arr) ? [...new Set(arr)] : [];\n\nexport default distinct;\n","/**\n * Returns all of the distinct values of the given arrays.\n * @signature distinctN :: [a] -> [b] -> ...[n] -> [m]\n * @func\n * @example\n * distinctN([ 1, 2 ], [ 2, 3, 4 ], [ 4, 5 ]) // [ 1, 2, 3, 4, 5 ]\n */\nconst distinctN = (...args) => [...new Set(...args)];\n\nexport default distinctN;\n","import isFunction from '../util/isFunction';\nimport isArray from '../util/isArray';\nimport curry from '../curry';\n\nexport default curry((func, arr) =>\n  isArray(arr) ? isFunction(func) ? [...new Set(arr.map(func))] : [...new Set(arr)] : []);\n","import curry from '../curry';\n\n/**\n * Applies the given func to each element in the array.\n * @signature each :: (a -> b) -> [c] -> undefined\n * @func\n * @example\n * difference(log, [1, 2, 3])\n */\nconst each = curry((fn, arr) => arr.forEach(fn));\n\nexport default each;\n","import curry from '../curry';\nimport clone from '../util/clone';\nimport isFunction from '../util/isFunction';\nimport isArray from '../util/isArray';\n\n/**\n * Filters the array using the given function.\n * @signature filter :: (a -> Boolean) -> [a] -> [a]\n * @func\n * @example\n * filter(x => x > 5, [1, 2, 3, 5, 6, 7]) // [6, 7]\n */\nconst filter = curry((func, arr) =>\n  !isFunction(func) ? isArray(arr) ? clone(arr) : [] : isArray(arr) ? arr.filter(func) : []);\n\nexport default filter;\n","import curry from '../curry';\n\n/**\n * Finds the first element that satisfies the given test func.\n * @signature find :: (a -> Boolean) -> [a] -> a\n * @func\n * @example\n * find(x => x.score === 5, [{score: 1}, {score: 2}, {score: 5}, {score: 6}, {score: 7}]) // {score: 5}\n */\nconst find = curry((fn, x) => x.find(fn));\n\nexport default find;\n","import curry from '../curry';\n\nexport default curry((fn, x) => x.findIndex(fn));\n","import reduce from '../reduce';\n\n/* eslint-disable array-bracket-newline, array-element-newline */\nconst flatten = reduce((acc, curr) => [ ...acc, ...curr ], []);\n\nexport default flatten;\n","/* eslint-disable fp-jxl/no-mutation */\nimport curry from '../curry';\nimport isFunction from '../util/isFunction';\nimport isArray from '../util/isArray';\n\n// Groups the elements of an array based on the given function.\n//\n// groupBy(Math.floor, [ 6.1, 4.2, 6.3 ]);\n// >> { '4': [4.2], '6': [ 6.1, 6.3 ] }\n//\n// groupBy('length', [ 'one', 'two', 'three' ]);\n// >> { '3': [ 'one', 'two' ], '5': ['three'] }\n//\n// groupBy(null, ['one', 'two', 'three']);\n// >> {}\n//\n// groupBy(Math.floor, null);\n// >> {}\n//\nexport default curry((func, arr) =>\n  func != null && isArray(arr) ?\n    arr.map(isFunction(func) ? func : val => val[func]).reduce((acc, val, i) => {\n      acc[val] = (acc[val] || []).concat(arr[i]);\n      return acc;\n    }, {}) :\n    {});\n","import curry from '../curry';\nimport isArray from '../util/isArray';\n\n// Returns a list of elements that exist in both arrays.\n//\n// intersection([ 1, 2, 3 ], [ 4, 3, 2 ]);\n// >> [ 2,3 ]\n//\nexport default curry((a, b) => {\n  const s = isArray(b) ? new Set(b) : new Set();\n\n  return isArray(a) ? a.filter(x => s.has(x)) : [...s];\n});\n","import curry from '../curry';\n\nexport default curry((sep, arr) => arr.join(sep));\n","import curry from '../curry';\nimport isFunction from '../util/isFunction';\nimport isArray from '../util/isArray';\nimport clone from '../util/clone';\n\nexport default curry((func, arr) =>\n  !isFunction(func) ? isArray(arr) ? clone(arr) : [] : isArray(arr) ? arr.map(func) : []);\n","import curry from '../curry';\nimport clone from '../util/clone';\n\nexport default curry((a, b) => Object.assign({}, clone(a), clone(b)));\n","import curry from '../curry';\nimport isArray from '../util/isArray';\n\n// Counts the occurrences of a value in an array.\n//\n// occurrences(1, [ 1, 1, 2, 1, 2, 3 ]);\n// >> 3\n//\nexport default curry((value, arr) =>\n  isArray(arr) ? arr.reduce((acc, val) => val === value ? acc + 1 : acc, 0) : 0);\n","const partial =\n  (fn, ...partialArgs) =>\n    (...remainingArgs) =>\n      fn(...partialArgs, ...remainingArgs);\n\nexport default partial;\n","// Performs left-to-right function composition.\n// The first (leftmost) function can accept one or more arguments; the remaining functions must be unary.\n//\n// const add5 = x => x + 5;\n// const multiply = (x, y) => x * y;\n// const multiplyAndAdd5 = pipe(multiply, add5);\n// multiplyAndAdd5(5, 2);\n//\n// >> 15\n//\nconst pipe = (...fns) =>\n  fns.reduce((f, g) =>\n    (...args) =>\n      g(f(...args)));\n\nexport default pipe;\n","import isArray from '../util/isArray';\nimport clone from '../util/clone';\n\n// May be slightly unconventional but given you can only return one value\n// which of the two things that pop does is more important?\n// Removing the item from the array or returning that item\n// I chose removing the item\n\n// pop([ 1, 2, 3, 4, 5 ]);\n// >> [ 1, 2, 3, 4 ]\n//\n// pop([1]);\n// >> []\n//\n// pop();\n// >> []\n//\nconst pop = arr => !isArray(arr) || !arr.length ? [] : clone(arr).slice(0, arr.length - 1);\n\nexport default pop;\n","/* eslint-disable promise/prefer-await-to-callbacks */\n\n// Converts an asynchronous function to return a promise.\n// Use currying to return a function returning a Promise that calls the original function.\n// Use the ...rest operator to pass in all the parameters.\n//\n// const delay = promisify((d, cb) => setTimeout(cb, d));\n// delay(2000).then(() => console.log('Hi!'));\n//\nconst promisify =\n  func =>\n    (...args) =>\n      new Promise((resolve, reject) =>\n        func(...args, (err, result) => err ? reject(err) : resolve(result)));\n\nexport default promisify;\n","import curry from '../curry';\nimport clone from '../util/clone';\n\nexport default curry((prop, obj) => clone(obj[prop]));\n","import curry from '../curry';\nimport isArray from '../util/isArray';\nimport clone from '../util/clone';\n\n// push(5, [ 1, 2, 3, 4 ]);\n// >> [ 1, 2, 3, 4, 5 ]\n//\n// push(5)\n// >> [5]\n//\nexport default curry((val, arr) => isArray(arr) ? [ ...clone(arr), val ] : [val]);\n","import curry from '../curry';\nimport isFunction from '../util/isFunction';\nimport isArray from '../util/isArray';\nimport clone from '../util/clone';\n\nexport default curry((init, fn, arr) =>\n  !isFunction(fn) ?\n    isArray(arr) ?\n      clone(arr) :\n      [] :\n    isArray(arr) ?\n      clone(arr.reduceRight(fn, init)) :\n      []);\n","import isArray from '../util/isArray';\nimport clone from '../util/clone';\n\nconst reverse = arr => isArray(arr) ? clone(arr).reverse() : [];\n\nexport default reverse;\n","/* eslint-disable fp-jxl/no-unused-expression, fp-jxl/no-mutation */\nimport curry from '../curry';\n\n// Selects the key-value pairs corresponding to the given keys from an object.\n//\n// select([ 'a', 'c.d' ], { a: 1, b: '2', c: { d: 3 } });\n// >> { a: 1, d: 3 }\n//\nconst select = (arr, obj) =>\n  arr.reduce((acc, curr) => {\n    const split = curr.split('.');\n\n    // This will return the full path => 'a.b' == a: { b: val }\n    // (acc[split[0]] = select(obj[split[0]], [split.slice(1).join('.')]), acc) :\n\n    /* eslint-disable no-return-assign */\n    // This will return just the nested value => 'a.b' == b: val\n    return split.length > 1 ?\n      acc[split[0]] = select(obj[split[0]], [split.slice(1).join('.')]) :\n      (curr in obj && (acc[curr] = obj[curr]), acc);\n  }, {});\n\nexport default curry(select);\n","import isArray from '../util/isArray';\nimport clone from '../util/clone';\n\n// May be slightly unconventional but given you can only return one value\n// which of the two things that pop does is more important?\n// Removing the item from the array or returning that item\n// I choose removing the item\n\n// shift([ 1, 2, 3, 4, 5 ]);\n// >> [ 2, 3, 4, 5 ]\n//\n// shift([1]);\n// >> []\n//\n// shift();\n// >> []\n//\nconst shift = arr => !isArray(arr) || !arr.length ? [] : clone(arr).slice(1);\n\nexport default shift;\n","/* eslint-disable fp-jxl/no-let, fp-jxl/no-loops, fp-jxl/no-mutation  */\nimport clone from '../util/clone';\n\n// Randomizes the order of the values of an array, returning a new array.\n// Uses the Fisher-Yates algoritm to reorder the elements of the array.\n//\n// shuffle([ 1, 2, 3 ]);\n// >> [ 2, 3, 1 ]\n//\nconst shuffle = ([...arr]) => {\n  const carr = clone(arr);\n\n  let m = carr.length;\n\n  while(m) {\n    const i = Math.floor(Math.random() * m--);\n\n    [ carr[m], carr[i] ] = [ carr[i], carr[m] ];\n  }\n\n  return carr;\n};\n\nexport default shuffle;\n","import curry from '../curry';\nimport isArray from '../util/isArray';\nimport clone from '../util/clone';\n\n// TODO: also call subset\nexport default curry((start, end, arr) => isArray(arr) ? clone(arr).slice(start, end) : []);\n","import curry from '../curry';\nimport isFunction from '../util/isFunction';\nimport isArray from '../util/isArray';\n\n// TODO: Bench against\n// export default curry((fn, array) => array.reduce((acc, curr) => fn(curr) || acc, false));\n\nconst some = curry((fn, arr) => isArray(arr) && isFunction(fn) ? arr.some(fn) : false);\n\nexport default some;\n","import curry from '../curry';\nimport isFunction from '../util/isFunction';\nimport isArray from '../util/isArray';\nimport clone from '../util/clone';\n\nexport default curry((fn, arr) =>\n  !isFunction(fn) ? isArray(arr) ? clone(arr) : [] : isArray(arr) ? clone(arr).sort(fn) : []);\n","import isArray from '../util/isArray';\nimport reduce from '../reduce';\n\n// Returns the sum of two or more numbers or an array of numbers.\n//\n// sum([ 1, 2, 3, 4 ]);\n// >> 10\n//\n// sum(1, 2, 3, 4);\n// >> 10\n//\nconst sumN = (...nums) =>\n  isArray(nums) ? reduce(0, (acc, val) => acc + Number(val), [].concat(...nums)) : 0;\n\nexport default sumN;\n","import curry from '../curry';\nimport isArray from '../util/isArray';\n\n// Returns the symmetric difference between two arrays.\n//\n// symmetricDifference([ 1, 2, 3 ], [ 1, 2, 4 ]);\n// >> [ 3, 4 ]\n//\nexport default curry((a, b) => {\n  const sA = isArray(a) ? new Set(a) : new Set();\n  const sB = isArray(b) ? new Set(b) : new Set();\n\n  return [ ...a.filter(x => !sB.has(x)), ...b.filter(x => !sA.has(x)) ];\n});\n","import curry from '../curry';\nimport isArray from '../util/isArray';\n\n// Returns every element that exists in any of the two arrays once.\n//\n// union([ 1, 2, 3 ], [ 4, 3, 2 ]);\n// >> [ 1, 2, 3, 4 ]\n//\nexport default curry((a, b) =>\n  Array.from(new Set([ ...isArray(a) ? a : [], ...isArray(b) ? b : [] ])));\n","import curry from '../curry';\nimport isArray from '../util/isArray';\nimport clone from '../util/clone';\n\n// unshift(0, [ 1, 2, 3, 4 ])\n// >> [ 0, 1, 2, 3, 4 ]\n//\n// unshift(0)\n// >> [0]\n//\nexport default curry((val, arr) => isArray(arr) ? [ val, ...clone(arr) ] : [val]);\n"],"names":["clone","x","i","Date","Array","isArray","arr","length","Object","constructor","obj","hasOwnProperty","value","isFunction","isObject","isString","String","isNumber","n","isNaN","parseFloat","isFinite","not","curry","fn","arity","args","bind","tap","y","A","f","I","K","OR","g","Fork","joiner","fnA","fnB","T","Maybe","map","flatten","undefined","Just","Nothing","of","val","_val","TypeError","other","Either","join","isRight","leftFn","rightFn","cata","None","Error","Right","Left","result","e","IO","effect","_effect","every","associate","prop","c","altAssoc","assoc","init","reduce","acc","Number","average","nums","sum","both","compact","filter","Boolean","compose","fns","concat","a","b","concatN","deviation","usePopulation","mean","Math","sqrt","pow","difference","s","Set","has","distinct","distinctN","func","each","forEach","find","findIndex","curr","sep","assign","partial","partialArgs","remainingArgs","pipe","pop","slice","promisify","Promise","resolve","reject","err","reduceRight","reverse","select","split","shift","shuffle","carr","m","floor","random","start","end","some","sort","sumN","sA","sB","from"],"mappings":"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"}